type FriendRequest
  @key(pk: "userID", sk: "requestingUserID")
  @gsi(pk: "userID", sk: "requestedAt") {
  userID: ID!
  requestingUserID: ID!
  requestedAt: String!
}

type Following
  @key(pk: "userID", sk: "followingUserID")
  @gsi(pk: "userID", sk: "acceptedAt")
  @gsi(pk: "followingUserID", sk: "acceptedAt") {
  userID: ID!
  followingUserID: ID!
  acceptedAt: String!
}

type Feed
  @key(pk: "userID", sk: "workoutID")
  @gsi(pk: "userID", sk: "createdAt") {
  userID: ID!
  workoutID: ID!
  workoutUserID: ID!
  createdAt: Int!
}

type Workout
  @key(pk: "workoutID")
  @gsi(pk: "userID", sk: "startTime")
  @gsi(pk: "userID", sk: "lastUpdated") {
  workoutID: ID!
  userID: ID!
  lastUpdated: Int!
  workout: String!
  startTime: Int!

  total_duration: Int!
  total_sets: Int!
  total_weight: Int!

  visible: Boolean!
  likes: Int!
  caption: String!
  postLocation: String!
  deleted: Boolean!
}

type Like @key(pk: "workoutID", sk: "userID") {
  userID: ID!
  workoutID: ID!
  createdAt: String!
}

type Exercise
  @key(pk: "exerciseID")
  @gsi(pk: "userID", sk: "lastUpdated")
  @gsi(pk: "userID", sk: "variationID") {
  exerciseID: ID!
  userID: ID!
  lastUpdated: Int!
  workoutID: ID!
  variationID: ID!
  exercise_sets: String!
  deleted: Boolean!

  total_sets: Int!
  total_weight: Int!
  maxEq: Int!
}

type User @key(pk: "userID") {
  userID: ID!
  lastUpdated: Int!
  name: String!
  bio: String!
  welcome: Boolean!
  maxTimer: Int!
  timerAutoStart: Boolean!
  timerNotifications: Boolean!
  programs: String!
  lastUpdated: Int!

  total_exercises: Int!
  total_workouts: Int!
  total_weight: Int!
  total_sets: Int!
  total_duration: Int!
}
