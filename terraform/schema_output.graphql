type FriendRequest
  @key(pk: "userID", sk: "requestingUserID")
  @gsi(pk: "userID", sk: "requestedAt") {
  userID: ID!
  requestingUserID: ID!
  requestedAt: String!
}

type Following
  @key(pk: "userID", sk: "followingUserID")
  @gsi(pk: "userID", sk: "acceptedAt")
  @gsi(pk: "followingUserID", sk: "acceptedAt") {
  userID: ID!
  followingUserID: ID!
  acceptedAt: String!
}

type Feed @key(pk: "userID", sk: "postID") @gsi(pk: "userID", sk: "createdAt") {
  userID: ID!
  postID: ID!
  postUserID: ID!
  createdAt: String!
}

type Post @key(pk: "postID") @gsi(pk: "userID", sk: "createdAt") {
  postID: ID!
  userID: ID!
  workoutID: ID!
  createdAt: String!
  likes: Int!
}

type Like @key(pk: "postID", sk: "userID") {
  userID: ID!
  postID: ID!
  createdAt: String!
}

type Exercise
  @key(pk: "exerciseID")
  @gsi(pk: "userID", sk: "lastUpdated")
  @gsi(pk: "userID", sk: "variationID")
  @gsi(pk: "workoutID", sk: "variationID") {
  exerciseID: ID!
  userID: ID!
  lastUpdated: Int!

  workoutID: ID!
  variationID: ID!
  sets: String
}

type Workout
  @key(pk: "workoutID")
  @gsi(pk: "userID", sk: "lastUpdated")
  @gsi(pk: "userID", sk: "startTime") {
  workoutID: ID!
  userID: ID!
  lastUpdated: Int!
  startTime: String!

  exerciseGroups: String
  name: String
  endTime: String
}

type FriendRequestKey {
  userID: ID!
  requestingUserID: ID!
}

type FriendRequestByUserIDRequestedAtKey {
  userID: ID!
  requestedAt: ID!
}

type FollowingKey {
  userID: ID!
  followingUserID: ID!
}

type FollowingByUserIDAcceptedAtKey {
  userID: ID!
  acceptedAt: ID!
}

type FollowingByFollowingUserIDAcceptedAtKey {
  followingUserID: ID!
  acceptedAt: ID!
}

type FeedKey {
  userID: ID!
  postID: ID!
}

type FeedByUserIDCreatedAtKey {
  userID: ID!
  createdAt: ID!
}

type PostKey {
  postID: ID!
  
}

type PostByUserIDCreatedAtKey {
  userID: ID!
  createdAt: ID!
}

type LikeKey {
  postID: ID!
  userID: ID!
}

type ExerciseKey {
  exerciseID: ID!
  
}

type ExerciseByUserIDLastUpdatedKey {
  userID: ID!
  lastUpdated: ID!
}

type ExerciseByUserIDVariationIDKey {
  userID: ID!
  variationID: ID!
}

type ExerciseByWorkoutIDVariationIDKey {
  workoutID: ID!
  variationID: ID!
}

type WorkoutKey {
  workoutID: ID!
  
}

type WorkoutByUserIDLastUpdatedKey {
  userID: ID!
  lastUpdated: ID!
}

type WorkoutByUserIDStartTimeKey {
  userID: ID!
  startTime: ID!
}
